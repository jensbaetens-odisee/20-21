##########
testlandschap 2
##########

filmpje bekijken en slides overlopen

##########
LINQ
##########

from g in getallen where (g%2) select g

getallen.where(x => x%2 == 0)

(Schrijf hier een unit test voor.)

for each en al de vorige maken gebruik van de IEnumerable interface.
Een interface die het mogelijk maakt om op een bepaalde manier over de container/data te lopen.

de enumerable maakt ook sum(), min(), max(), average() mogelijk maar dan wel als het getallen zijn.

2e voorbeeld om eerst de studenten aan te laten werken met de studenten

waarschijnlijk met foreach gedaan omdat het geen getallen zijn.
je kan er echter een lambda expressie/LINQ functie/ delegate ook insteken
	- static int GetAge(Student student)
	- lambda expressies (input) => {statements}
		maak dummy delegate Func<int, int, int> sum = (int a, int b)=> {return a+b}
		int's bij a en b niet strikt noodzakelijk want er is geen verwarring mogelijk.
		acolades mogen weg als er maar 1 statement is
		haakjes rond input mag weg als er maar 1 input is
		
zet nu de GetAge methode om naar een lambda expressie

de methode where om de resultaten te filteren, zelfde type
select() niet noodzakelijk zelfde type

method chaining. eerst where dan select, let op de volgorde
order by voor te sorteren orderby descending
zoeken naar het eerste element: First()
